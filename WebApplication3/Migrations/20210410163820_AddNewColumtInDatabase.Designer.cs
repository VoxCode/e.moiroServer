// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using e.moiroServer.Models;

namespace e.moiroServer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210410163820_AddNewColumtInDatabase")]
    partial class AddNewColumtInDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a1cca11c-c211-4076-bd45-77c1a2d2456b",
                            ConcurrencyStamp = "6924ea5e-f1e0-4d6e-8390-37cc10cd98d5",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "03c28a50-ed11-4cef-893c-dfe0d5ad4ff5",
                            ConcurrencyStamp = "6d1597f6-3cb4-41a9-a478-f8a483299e93",
                            Name = "Viewer",
                            NormalizedName = "VIEWER"
                        },
                        new
                        {
                            Id = "dba9962f-07c1-4375-9f8c-90eadebd7578",
                            ConcurrencyStamp = "b2e78926-f6c5-415a-8739-9d22f0738b43",
                            Name = "Dean",
                            NormalizedName = "DEAN"
                        },
                        new
                        {
                            Id = "7ac4b28d-8a5e-48fb-a4ae-380a099ccd8f",
                            ConcurrencyStamp = "b82d3ac1-8640-4861-9b14-0c23d560154f",
                            Name = "Creator",
                            NormalizedName = "CREATOR"
                        },
                        new
                        {
                            Id = "fba73d5d-1a26-413d-888c-672d0659ca38",
                            ConcurrencyStamp = "6521e5ab-680a-4984-bea3-32f9c5b701ff",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.AdditionalLiterature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AdditionalLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CertificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CertificationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Выпускная работа"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Зачет"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Экзамен"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Собеседование в форме зачета"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Собеседование в форме деловой игры"
                        });
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CurriculumSections");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Annotation")
                        .HasColumnType("text");

                    b.Property<string>("TopicTitle")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CurriculumTopics");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicAdditionalLiterature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdditionalLiteratureId")
                        .HasColumnType("integer");

                    b.Property<int>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalLiteratureId");

                    b.HasIndex("CurriculumTopicId");

                    b.ToTable("CurriculumTopicAdditionalLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("CurriculumTopicDepartments");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicFinalExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.Property<int>("FinalExaminationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicId");

                    b.HasIndex("FinalExaminationId");

                    b.ToTable("CurriculumTopicFinalExaminations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicMainLiterature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.Property<int>("MainLiteratureId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicId");

                    b.HasIndex("MainLiteratureId");

                    b.ToTable("CurriculumTopicMainLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicRegulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.Property<int>("RegulationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicId");

                    b.HasIndex("RegulationId");

                    b.ToTable("CurriculumTopicRegulations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicStudentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicId");

                    b.HasIndex("StudentCategoryId");

                    b.ToTable("CurriculumTopicStudentCategories");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicTestWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.Property<int>("TestWorkId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicId");

                    b.HasIndex("TestWorkId");

                    b.ToTable("CurriculumTopicTestWorks");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicTrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClassHours")
                        .HasColumnType("integer");

                    b.Property<int>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsVariable")
                        .HasColumnType("boolean");

                    b.Property<int?>("OccupationFormId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("TrainingProgramCurriculumSectionId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgrmaCurriculumSectionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicId");

                    b.HasIndex("OccupationFormId");

                    b.HasIndex("TrainingProgramCurriculumSectionId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("CurriculumTopicTrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DepartmentHeadName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Кафедра дошкольного и начального образования"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Кафедра психологии и управления"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Кафедра частных методик общего среднего образования"
                        });
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Expert");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.FinalExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CertificationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CertificationTypeId");

                    b.ToTable("FinalExaminations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.FormOfEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FormOfEducations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Очная"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Заочная"
                        });
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CalendarYear")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ClassEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ClassStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GroupNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.MainLiterature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MainLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.OccupationForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("PluralName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OccupationForms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Лекция",
                            PluralName = "Лекции"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Практическое занятие",
                            PluralName = "Практические занятия"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Семинарское занятие",
                            PluralName = "Семинарские занятия"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Круглый стол, тематическая дискуссия",
                            PluralName = "Круглые столы, тематические дискуссии"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Лабораторное занятие",
                            PluralName = "Лабораторные занятия"
                        },
                        new
                        {
                            Id = 6,
                            FullName = "Деловая игра",
                            PluralName = "Деловые игры"
                        },
                        new
                        {
                            Id = 7,
                            FullName = "Тренинг",
                            PluralName = "Тренинги"
                        },
                        new
                        {
                            Id = 8,
                            FullName = "Конференция",
                            PluralName = "Конференции"
                        });
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Regulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Regulations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("SubgroupNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ScheduleBlock");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlockClassRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClassRoomId")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduleBlockId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleBlockId");

                    b.ToTable("ScheduleBlockClassRoom");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlockClassTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClassTimeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ScheduleBlockId")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleBlockId");

                    b.ToTable("ScheduleBlockClassTime");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlockCurriculumTopicTrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurriculumTopicTrainingProgramId")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduleBlockId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicTrainingProgramId");

                    b.HasIndex("ScheduleBlockId");

                    b.ToTable("ScheduleBlockCurriculumTopicTrainingProgram");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlockTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ScheduleBlockId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleBlockId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ScheduleBlockTeacher");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleDateSheduleBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ScheduleBlockId")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduleDateId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleBlockId");

                    b.ToTable("ScheduleDateSheduleBlock");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.StudentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StudentCategories");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AcademicRank")
                        .HasColumnType("text");

                    b.Property<bool>("IsCathedral")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TestWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TestWorks");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CertificationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ControlWork")
                        .HasColumnType("text");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("FormOfEducationId")
                        .HasColumnType("integer");

                    b.Property<string>("Introduction")
                        .HasColumnType("text");

                    b.Property<byte[]>("IntroductionData")
                        .HasColumnType("bytea");

                    b.Property<bool>("IsControlWork")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDistanceLearning")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTestWork")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfHours")
                        .HasColumnType("integer");

                    b.Property<int>("StudentCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CertificationTypeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FormOfEducationId");

                    b.HasIndex("StudentCategoryId");

                    b.ToTable("TrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramAdditionalLiterature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdditionalLiteratureId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalLiteratureId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramAdditionalLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramCurriculumSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CurriculumSectionId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxVaiableTopicHours")
                        .HasColumnType("integer");

                    b.Property<int>("SectionNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumSectionId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramCurriculumSections");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramFinalExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FinalExaminationId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FinalExaminationId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramFinalExaminations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramMainLiterature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("MainLiteratureId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MainLiteratureId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramMainLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramRegulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("RegulationId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegulationId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramRegulations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ExpertId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramTeachers");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramTestWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TestWorkId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestWorkId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramTestWorks");
                });

            modelBuilder.Entity("e.moiroServer.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TeacherId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("e.moiroServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("e.moiroServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("e.moiroServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicAdditionalLiterature", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.AdditionalLiterature", null)
                        .WithMany("CurriculumTopicAdditionalLiteratures")
                        .HasForeignKey("AdditionalLiteratureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany("CurriculumTopicAdditionalLiteratures")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicDepartment", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany("CurriculumTopicDepartments")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.Department", null)
                        .WithMany("CurriculumTopicDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicFinalExamination", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany("CurriculumTopicFinalExaminations")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.FinalExamination", "FinalExamination")
                        .WithMany("CurriculumTopicFinalExaminations")
                        .HasForeignKey("FinalExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinalExamination");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicMainLiterature", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany("CurriculumTopicMainLiteratures")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.MainLiterature", null)
                        .WithMany("CurriculumTopicMainLiteratures")
                        .HasForeignKey("MainLiteratureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicRegulation", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany("CurriculumTopicRegulations")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.Regulation", null)
                        .WithMany("CurriculumTopicRegulations")
                        .HasForeignKey("RegulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicStudentCategory", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany("CurriculumTopicStudentCategories")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.StudentCategory", null)
                        .WithMany("CurriculumTopicStudentCategories")
                        .HasForeignKey("StudentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicTestWork", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany("CurriculumTopicTestWorks")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TestWork", null)
                        .WithMany("CurriculumTopicTestWorks")
                        .HasForeignKey("TestWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicTrainingProgram", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", "CurriculumTopic")
                        .WithMany("CurriculumTopicTrainingPrograms")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.OccupationForm", "OccupationForm")
                        .WithMany("CurriculumTopicTrainingPrograms")
                        .HasForeignKey("OccupationFormId");

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgramCurriculumSection", "TrainingProgramCurriculumSection")
                        .WithMany("CurriculumTopicTrainingPrograms")
                        .HasForeignKey("TrainingProgramCurriculumSectionId");

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", "TrainingProgram")
                        .WithMany("CurriculumTopicTrainingPrograms")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurriculumTopic");

                    b.Navigation("OccupationForm");

                    b.Navigation("TrainingProgram");

                    b.Navigation("TrainingProgramCurriculumSection");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.FinalExamination", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CertificationType", null)
                        .WithMany("FinalExaminations")
                        .HasForeignKey("CertificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Group", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("Groups")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlockClassRoom", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.ScheduleBlock", null)
                        .WithMany("ScheduleBlockClassRooms")
                        .HasForeignKey("ScheduleBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlockClassTime", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.ScheduleBlock", null)
                        .WithMany("ScheduleBlockClassTimes")
                        .HasForeignKey("ScheduleBlockId");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlockCurriculumTopicTrainingProgram", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopicTrainingProgram", "CurriculumTopicTrainingProgram")
                        .WithMany("ScheduleBlockCurriculumTopicTrainingPrograms")
                        .HasForeignKey("CurriculumTopicTrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.ScheduleBlock", "ScheduleBlock")
                        .WithMany("ScheduleBlockCurriculumTopicTrainingPrograms")
                        .HasForeignKey("ScheduleBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurriculumTopicTrainingProgram");

                    b.Navigation("ScheduleBlock");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlockTeacher", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.ScheduleBlock", null)
                        .WithMany("ScheduleBlockTeachers")
                        .HasForeignKey("ScheduleBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.Teacher", null)
                        .WithMany("ScheduleBlockTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleDateSheduleBlock", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.ScheduleBlock", null)
                        .WithMany("ScheduleDateSheduleBlocks")
                        .HasForeignKey("ScheduleBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgram", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CertificationType", null)
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("CertificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.Department", null)
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.FormOfEducation", null)
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("FormOfEducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.StudentCategory", null)
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("StudentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramAdditionalLiterature", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.AdditionalLiterature", null)
                        .WithMany("TrainingProgramAdditionalLiteratures")
                        .HasForeignKey("AdditionalLiteratureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramAdditionalLiteratures")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramCurriculumSection", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumSection", null)
                        .WithMany("TrainingProgramCurriculumSections")
                        .HasForeignKey("CurriculumSectionId");

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", "TrainingProgram")
                        .WithMany("TrainingProgramCurriculumSections")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingProgram");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramFinalExamination", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.FinalExamination", null)
                        .WithMany("TrainingProgramFinalExaminations")
                        .HasForeignKey("FinalExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramFinalExaminations")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramMainLiterature", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.MainLiterature", null)
                        .WithMany("TrainingProgramMainLiteratures")
                        .HasForeignKey("MainLiteratureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramMainLiteratures")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramRegulation", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.Regulation", null)
                        .WithMany("TrainingProgramRegulations")
                        .HasForeignKey("RegulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramRegulations")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramTeacher", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.Expert", "Expert")
                        .WithMany("TrainingProgramTeachers")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.Teacher", null)
                        .WithMany("TrainingProgramTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramTeachers")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramTestWork", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.TestWork", null)
                        .WithMany("TrainingProgramTestWorks")
                        .HasForeignKey("TestWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramTestWorks")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Models.User", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.Teacher", "Teacher")
                        .WithMany("Users")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.AdditionalLiterature", b =>
                {
                    b.Navigation("CurriculumTopicAdditionalLiteratures");

                    b.Navigation("TrainingProgramAdditionalLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CertificationType", b =>
                {
                    b.Navigation("FinalExaminations");

                    b.Navigation("TrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumSection", b =>
                {
                    b.Navigation("TrainingProgramCurriculumSections");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopic", b =>
                {
                    b.Navigation("CurriculumTopicAdditionalLiteratures");

                    b.Navigation("CurriculumTopicDepartments");

                    b.Navigation("CurriculumTopicFinalExaminations");

                    b.Navigation("CurriculumTopicMainLiteratures");

                    b.Navigation("CurriculumTopicRegulations");

                    b.Navigation("CurriculumTopicStudentCategories");

                    b.Navigation("CurriculumTopicTestWorks");

                    b.Navigation("CurriculumTopicTrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicTrainingProgram", b =>
                {
                    b.Navigation("ScheduleBlockCurriculumTopicTrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Department", b =>
                {
                    b.Navigation("CurriculumTopicDepartments");

                    b.Navigation("TrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Expert", b =>
                {
                    b.Navigation("TrainingProgramTeachers");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.FinalExamination", b =>
                {
                    b.Navigation("CurriculumTopicFinalExaminations");

                    b.Navigation("TrainingProgramFinalExaminations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.FormOfEducation", b =>
                {
                    b.Navigation("TrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.MainLiterature", b =>
                {
                    b.Navigation("CurriculumTopicMainLiteratures");

                    b.Navigation("TrainingProgramMainLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.OccupationForm", b =>
                {
                    b.Navigation("CurriculumTopicTrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Regulation", b =>
                {
                    b.Navigation("CurriculumTopicRegulations");

                    b.Navigation("TrainingProgramRegulations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlock", b =>
                {
                    b.Navigation("ScheduleBlockClassRooms");

                    b.Navigation("ScheduleBlockClassTimes");

                    b.Navigation("ScheduleBlockCurriculumTopicTrainingPrograms");

                    b.Navigation("ScheduleBlockTeachers");

                    b.Navigation("ScheduleDateSheduleBlocks");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.StudentCategory", b =>
                {
                    b.Navigation("CurriculumTopicStudentCategories");

                    b.Navigation("TrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Teacher", b =>
                {
                    b.Navigation("ScheduleBlockTeachers");

                    b.Navigation("TrainingProgramTeachers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TestWork", b =>
                {
                    b.Navigation("CurriculumTopicTestWorks");

                    b.Navigation("TrainingProgramTestWorks");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgram", b =>
                {
                    b.Navigation("CurriculumTopicTrainingPrograms");

                    b.Navigation("Groups");

                    b.Navigation("TrainingProgramAdditionalLiteratures");

                    b.Navigation("TrainingProgramCurriculumSections");

                    b.Navigation("TrainingProgramFinalExaminations");

                    b.Navigation("TrainingProgramMainLiteratures");

                    b.Navigation("TrainingProgramRegulations");

                    b.Navigation("TrainingProgramTeachers");

                    b.Navigation("TrainingProgramTestWorks");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramCurriculumSection", b =>
                {
                    b.Navigation("CurriculumTopicTrainingPrograms");
                });
#pragma warning restore 612, 618
        }
    }
}
