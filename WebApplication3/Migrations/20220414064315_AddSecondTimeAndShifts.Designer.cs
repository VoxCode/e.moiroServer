// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using e.moiroServer.Models;

namespace e.moiroServer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220414064315_AddSecondTimeAndShifts")]
    partial class AddSecondTimeAndShifts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AdditionalLiteratureCurriculumTopic", b =>
                {
                    b.Property<int>("AdditionalLiteraturesId")
                        .HasColumnType("integer");

                    b.Property<int>("CurriculumTopicsId")
                        .HasColumnType("integer");

                    b.HasKey("AdditionalLiteraturesId", "CurriculumTopicsId");

                    b.HasIndex("CurriculumTopicsId");

                    b.ToTable("AdditionalLiteratureCurriculumTopic");
                });

            modelBuilder.Entity("CurriculumTopicDepartment", b =>
                {
                    b.Property<int>("CurriculumTopicsId")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentsId")
                        .HasColumnType("integer");

                    b.HasKey("CurriculumTopicsId", "DepartmentsId");

                    b.HasIndex("DepartmentsId");

                    b.ToTable("CurriculumTopicDepartment");
                });

            modelBuilder.Entity("CurriculumTopicFinalExamination", b =>
                {
                    b.Property<int>("CurriculumTopicsId")
                        .HasColumnType("integer");

                    b.Property<int>("FinalExaminationsId")
                        .HasColumnType("integer");

                    b.HasKey("CurriculumTopicsId", "FinalExaminationsId");

                    b.HasIndex("FinalExaminationsId");

                    b.ToTable("CurriculumTopicFinalExamination");
                });

            modelBuilder.Entity("CurriculumTopicMainLiterature", b =>
                {
                    b.Property<int>("CurriculumTopicsId")
                        .HasColumnType("integer");

                    b.Property<int>("MainLiteraturesId")
                        .HasColumnType("integer");

                    b.HasKey("CurriculumTopicsId", "MainLiteraturesId");

                    b.HasIndex("MainLiteraturesId");

                    b.ToTable("CurriculumTopicMainLiterature");
                });

            modelBuilder.Entity("CurriculumTopicRegulation", b =>
                {
                    b.Property<int>("CurriculumTopicsId")
                        .HasColumnType("integer");

                    b.Property<int>("RegulationsId")
                        .HasColumnType("integer");

                    b.HasKey("CurriculumTopicsId", "RegulationsId");

                    b.HasIndex("RegulationsId");

                    b.ToTable("CurriculumTopicRegulation");
                });

            modelBuilder.Entity("CurriculumTopicStudentCategory", b =>
                {
                    b.Property<int>("CurriculumTopicsId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentCategoriesId")
                        .HasColumnType("integer");

                    b.HasKey("CurriculumTopicsId", "StudentCategoriesId");

                    b.HasIndex("StudentCategoriesId");

                    b.ToTable("CurriculumTopicStudentCategory");
                });

            modelBuilder.Entity("CurriculumTopicTestWork", b =>
                {
                    b.Property<int>("CurriculumTopicsId")
                        .HasColumnType("integer");

                    b.Property<int>("TestWorksId")
                        .HasColumnType("integer");

                    b.HasKey("CurriculumTopicsId", "TestWorksId");

                    b.HasIndex("TestWorksId");

                    b.ToTable("CurriculumTopicTestWork");
                });

            modelBuilder.Entity("CurriculumTopicTrainingProgram", b =>
                {
                    b.Property<int>("CurriculumTopicsId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramsId")
                        .HasColumnType("integer");

                    b.HasKey("CurriculumTopicsId", "TrainingProgramsId");

                    b.HasIndex("TrainingProgramsId");

                    b.ToTable("CurriculumTopicTrainingProgram");
                });

            modelBuilder.Entity("DepartmentTeacher", b =>
                {
                    b.Property<int>("DepartmentsId")
                        .HasColumnType("integer");

                    b.Property<int>("TeachersId")
                        .HasColumnType("integer");

                    b.HasKey("DepartmentsId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("DepartmentTeacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.AdditionalLiterature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AuthorIndex")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AdditionalLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CertificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CertificationTypes");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ClassRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClassRooms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ClassTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ClassTimeEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ClassTimeStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DayOfTheWeek")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SecondTimeEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("SecondTimeStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ClassTimes");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Annotation")
                        .HasColumnType("text");

                    b.Property<string>("AuthorIndex")
                        .HasColumnType("text");

                    b.Property<string>("TopicTitle")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CurriculumTopics");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicTrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Annotation")
                        .HasColumnType("text");

                    b.Property<int>("ClassHours")
                        .HasColumnType("integer");

                    b.Property<bool>("IsVariable")
                        .HasColumnType("boolean");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TestWorkHours")
                        .HasColumnType("integer");

                    b.Property<string>("TopicTitle")
                        .HasColumnType("text");

                    b.Property<int>("TrainingProgramCurriculumSectionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramCurriculumSectionId");

                    b.ToTable("CurriculumTopicTrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DepartmentHeadName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Experts");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.FinalExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AuthorIndex")
                        .HasColumnType("text");

                    b.Property<int>("CertificationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CertificationTypeId");

                    b.ToTable("FinalExaminations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.FormOfEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FormOfEducations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CalendarYear")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ClassEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ClassStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GroupNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.GuidedTestWorkAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("CurriculumTopicTrainingProgramId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicTrainingProgramId");

                    b.ToTable("GuidedTestWorkAssignments");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.InstituteStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Dean")
                        .HasColumnType("text");

                    b.Property<string>("EducationalDepartmentChief")
                        .HasColumnType("text");

                    b.Property<string>("Rector")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InstituteStructures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.MainLiterature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AuthorIndex")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MainLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.MaxVariableTopicTime", b =>
                {
                    b.Property<int>("TrainingProgramCurriculumSectionId")
                        .HasColumnType("integer");

                    b.Property<int>("OccupationFormId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxVariableTopicHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("TrainingProgramCurriculumSectionId", "OccupationFormId");

                    b.HasIndex("OccupationFormId");

                    b.ToTable("MaxVariableTopicTimes");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.OccupationForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("PluralName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OccupationForms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.OccupationFormClassHour", b =>
                {
                    b.Property<int>("CurriculumTopicTrainingProgramId")
                        .HasColumnType("integer");

                    b.Property<int>("OccupationFormId")
                        .HasColumnType("integer");

                    b.Property<int>("ClassHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("SerialNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("CurriculumTopicTrainingProgramId", "OccupationFormId");

                    b.HasIndex("OccupationFormId");

                    b.ToTable("OccupationFormClassHours");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Regulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AuthorIndex")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Regulations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("SubgroupNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ScheduleBlocks");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlockClassRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClassRoomId")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduleBlockId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("ScheduleBlockId");

                    b.ToTable("ScheduleBlockClassRooms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlockClassTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClassTimeId")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduleBlockId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassTimeId");

                    b.HasIndex("ScheduleBlockId");

                    b.ToTable("ScheduleBlockClassTimes");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlockCurriculumTopicTrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurriculumTopicTrainingProgramId")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduleBlockId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicTrainingProgramId");

                    b.HasIndex("ScheduleBlockId");

                    b.ToTable("ScheduleBlockCurriculumTopicTrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlockTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ScheduleBlockId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleBlockId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ScheduleBlockTeachers");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("ScheduleDates");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleDateScheduleBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ScheduleBlockId")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduleDateId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleBlockId");

                    b.HasIndex("ScheduleDateId");

                    b.ToTable("ScheduleDateScheduleBlocks");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.StudentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("GenitiveName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StudentCategories");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AcademicRank")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsCathedral")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PatronymicName")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TestWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AuthorIndex")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TestWorks");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CertificationTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("FormOfEducationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsControlWork")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDistanceLearning")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTestWork")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfHours")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfWeeks")
                        .HasColumnType("integer");

                    b.Property<int>("StudentCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CertificationTypeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FormOfEducationId");

                    b.HasIndex("StudentCategoryId");

                    b.ToTable("TrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramAdditionalLiterature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramAdditionalLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramCurriculumSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SectionNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramCurriculumSections");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramFinalExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramFinalExaminations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramIndependentWorkQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ContentDocx")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramIndependentWorkQuestions");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramIntroduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("IntroductionDocx")
                        .HasColumnType("bytea");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramIntroductions");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramMainLiterature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramMainLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramRegulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramRegulations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ExpertId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramTeachers");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramTestWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ContentDocx")
                        .HasColumnType("bytea");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramTestWorks");
                });

            modelBuilder.Entity("e.moiroServer.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TeacherId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AdditionalLiteratureCurriculumTopic", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.AdditionalLiterature", null)
                        .WithMany()
                        .HasForeignKey("AdditionalLiteraturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany()
                        .HasForeignKey("CurriculumTopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CurriculumTopicDepartment", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany()
                        .HasForeignKey("CurriculumTopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CurriculumTopicFinalExamination", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany()
                        .HasForeignKey("CurriculumTopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.FinalExamination", null)
                        .WithMany()
                        .HasForeignKey("FinalExaminationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CurriculumTopicMainLiterature", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany()
                        .HasForeignKey("CurriculumTopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.MainLiterature", null)
                        .WithMany()
                        .HasForeignKey("MainLiteraturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CurriculumTopicRegulation", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany()
                        .HasForeignKey("CurriculumTopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.Regulation", null)
                        .WithMany()
                        .HasForeignKey("RegulationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CurriculumTopicStudentCategory", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany()
                        .HasForeignKey("CurriculumTopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.StudentCategory", null)
                        .WithMany()
                        .HasForeignKey("StudentCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CurriculumTopicTestWork", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany()
                        .HasForeignKey("CurriculumTopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TestWork", null)
                        .WithMany()
                        .HasForeignKey("TestWorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CurriculumTopicTrainingProgram", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany()
                        .HasForeignKey("CurriculumTopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany()
                        .HasForeignKey("TrainingProgramsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentTeacher", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("e.moiroServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("e.moiroServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("e.moiroServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicTrainingProgram", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.TrainingProgramCurriculumSection", "TrainingProgramCurriculumSection")
                        .WithMany("CurriculumTopicTrainingPrograms")
                        .HasForeignKey("TrainingProgramCurriculumSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingProgramCurriculumSection");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.FinalExamination", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CertificationType", null)
                        .WithMany("FinalExaminations")
                        .HasForeignKey("CertificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Group", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("Groups")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.GuidedTestWorkAssignment", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopicTrainingProgram", "CurriculumTopicTrainingProgram")
                        .WithMany("GuidedTestWorkAssignments")
                        .HasForeignKey("CurriculumTopicTrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurriculumTopicTrainingProgram");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.MaxVariableTopicTime", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.OccupationForm", "OccupationForm")
                        .WithMany("MaxVariableTopicTimes")
                        .HasForeignKey("OccupationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgramCurriculumSection", "TrainingProgramCurriculumSection")
                        .WithMany("MaxVariableTopicTimes")
                        .HasForeignKey("TrainingProgramCurriculumSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OccupationForm");

                    b.Navigation("TrainingProgramCurriculumSection");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.OccupationFormClassHour", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopicTrainingProgram", "CurriculumTopicTrainingProgram")
                        .WithMany("OccupationFormClassHours")
                        .HasForeignKey("CurriculumTopicTrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.OccupationForm", "OccupationForm")
                        .WithMany("OccupationFormClassHours")
                        .HasForeignKey("OccupationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurriculumTopicTrainingProgram");

                    b.Navigation("OccupationForm");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlockClassRoom", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.ClassRoom", null)
                        .WithMany("ScheduleBlockClassRooms")
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.ScheduleBlock", null)
                        .WithMany("ScheduleBlockClassRooms")
                        .HasForeignKey("ScheduleBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlockClassTime", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.ClassTime", null)
                        .WithMany("ScheduleBlockClassTimes")
                        .HasForeignKey("ClassTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.ScheduleBlock", null)
                        .WithMany("ScheduleBlockClassTimes")
                        .HasForeignKey("ScheduleBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlockCurriculumTopicTrainingProgram", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopicTrainingProgram", "CurriculumTopicTrainingProgram")
                        .WithMany("ScheduleBlockCurriculumTopicTrainingPrograms")
                        .HasForeignKey("CurriculumTopicTrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.ScheduleBlock", "ScheduleBlock")
                        .WithMany("ScheduleBlockCurriculumTopicTrainingPrograms")
                        .HasForeignKey("ScheduleBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurriculumTopicTrainingProgram");

                    b.Navigation("ScheduleBlock");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlockTeacher", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.ScheduleBlock", null)
                        .WithMany("ScheduleBlockTeachers")
                        .HasForeignKey("ScheduleBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.Teacher", null)
                        .WithMany("ScheduleBlockTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleDate", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.Group", "Group")
                        .WithMany("ScheduleDates")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleDateScheduleBlock", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.ScheduleBlock", null)
                        .WithMany("ScheduleDateSheduleBlocks")
                        .HasForeignKey("ScheduleBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.ScheduleDate", null)
                        .WithMany("ScheduleDateSheduleBlocks")
                        .HasForeignKey("ScheduleDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgram", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CertificationType", null)
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("CertificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.Department", null)
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.FormOfEducation", null)
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("FormOfEducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.StudentCategory", null)
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("StudentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramAdditionalLiterature", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramAdditionalLiteratures")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramCurriculumSection", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramCurriculumSections")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramFinalExamination", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramFinalExaminations")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramIndependentWorkQuestion", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramIndependentWorkQuestions")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramIntroduction", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramIntroductions")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramMainLiterature", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramMainLiteratures")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramRegulation", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramRegulations")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramTeacher", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.Expert", "Expert")
                        .WithMany("TrainingProgramTeachers")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.Teacher", null)
                        .WithMany("TrainingProgramTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramTeachers")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramTestWork", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramTestWorks")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Models.User", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.Teacher", "Teacher")
                        .WithMany("Users")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CertificationType", b =>
                {
                    b.Navigation("FinalExaminations");

                    b.Navigation("TrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ClassRoom", b =>
                {
                    b.Navigation("ScheduleBlockClassRooms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ClassTime", b =>
                {
                    b.Navigation("ScheduleBlockClassTimes");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicTrainingProgram", b =>
                {
                    b.Navigation("GuidedTestWorkAssignments");

                    b.Navigation("OccupationFormClassHours");

                    b.Navigation("ScheduleBlockCurriculumTopicTrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Department", b =>
                {
                    b.Navigation("TrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Expert", b =>
                {
                    b.Navigation("TrainingProgramTeachers");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.FormOfEducation", b =>
                {
                    b.Navigation("TrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Group", b =>
                {
                    b.Navigation("ScheduleDates");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.OccupationForm", b =>
                {
                    b.Navigation("MaxVariableTopicTimes");

                    b.Navigation("OccupationFormClassHours");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleBlock", b =>
                {
                    b.Navigation("ScheduleBlockClassRooms");

                    b.Navigation("ScheduleBlockClassTimes");

                    b.Navigation("ScheduleBlockCurriculumTopicTrainingPrograms");

                    b.Navigation("ScheduleBlockTeachers");

                    b.Navigation("ScheduleDateSheduleBlocks");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.ScheduleDate", b =>
                {
                    b.Navigation("ScheduleDateSheduleBlocks");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.StudentCategory", b =>
                {
                    b.Navigation("TrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Teacher", b =>
                {
                    b.Navigation("ScheduleBlockTeachers");

                    b.Navigation("TrainingProgramTeachers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgram", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("TrainingProgramAdditionalLiteratures");

                    b.Navigation("TrainingProgramCurriculumSections");

                    b.Navigation("TrainingProgramFinalExaminations");

                    b.Navigation("TrainingProgramIndependentWorkQuestions");

                    b.Navigation("TrainingProgramIntroductions");

                    b.Navigation("TrainingProgramMainLiteratures");

                    b.Navigation("TrainingProgramRegulations");

                    b.Navigation("TrainingProgramTeachers");

                    b.Navigation("TrainingProgramTestWorks");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramCurriculumSection", b =>
                {
                    b.Navigation("CurriculumTopicTrainingPrograms");

                    b.Navigation("MaxVariableTopicTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
