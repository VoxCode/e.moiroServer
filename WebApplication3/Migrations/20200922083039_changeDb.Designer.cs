// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using e.moiroServer.Models;

namespace e.moiroServer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200922083039_changeDb")]
    partial class changeDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.AdditionalLiterature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AdditionalLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SectionNumberId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SectionNumberId");

                    b.ToTable("CurriculumSections");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Annotation")
                        .HasColumnType("text");

                    b.Property<string>("TestWork")
                        .HasColumnType("text");

                    b.Property<string>("TopicTitle")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CurriculumTopics");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicAdditionalLiterature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdditionalLiteratureId")
                        .HasColumnType("integer");

                    b.Property<int>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalLiteratureId");

                    b.HasIndex("CurriculumTopicId");

                    b.ToTable("CurriculumTopicAdditionalLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("CurriculumTopicDepartments");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicFinalExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.Property<int>("FinalExaminationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicId");

                    b.HasIndex("FinalExaminationId");

                    b.ToTable("CurriculumTopicFinalExaminations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicMainLiterature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.Property<int>("MainLiteratureId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicId");

                    b.HasIndex("MainLiteratureId");

                    b.ToTable("CurriculumTopicMainLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicRegulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.Property<int>("RegulationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicId");

                    b.HasIndex("RegulationId");

                    b.ToTable("CurriculumTopicRegulations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicStudentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicId");

                    b.HasIndex("StudentCategoryId");

                    b.ToTable("CurriculumTopicStudentCategories");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicTestWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.Property<int>("TestWorkId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicId");

                    b.HasIndex("TestWorkId");

                    b.ToTable("CurriculumTopicTestWorks");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicTrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClassHours")
                        .HasColumnType("integer");

                    b.Property<int>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsVariable")
                        .HasColumnType("boolean");

                    b.Property<int>("OccupationFormId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumTopicId");

                    b.HasIndex("OccupationFormId");

                    b.ToTable("CurriculumTopicTrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.FinalExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CertificationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FinalExaminations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.FormOfEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FormOfEducations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CalendarYear")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ClassEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ClassStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FormOfEducationId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupNumber")
                        .HasColumnType("integer");

                    b.Property<string>("TheTopicOfContinuingEducation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FormOfEducationId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.MainLiterature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MainLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.OccupationForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OccupationForms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Regulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Regulations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.SectionNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SectionNumbers");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.StudentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StudentCategories");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsCathedral")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("TeachingPositionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeachingPositionId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TeachingPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TeachingPositions");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TestWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TestWorks");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CertificationTypeId")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text");

                    b.Property<int?>("DepartmentId1")
                        .HasColumnType("integer");

                    b.Property<string>("IndependentWork")
                        .HasColumnType("text");

                    b.Property<bool>("IsDistanceLearning")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIndependentWork")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTestWork")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfHours")
                        .HasColumnType("integer");

                    b.Property<int?>("StudentCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("TeacherCategoryId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId1");

                    b.HasIndex("StudentCategoryId");

                    b.ToTable("TrainingPrograms");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramAdditionalLiterature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdditionalLiteratureId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalLiteratureId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramAdditionalLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramCurriculumSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurriculumSectionId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumSectionId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramCurriculumSections");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramFinalExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FinalExaminationId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FinalExaminationId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramFinalExaminations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramMainLiterature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("MainLiteratureId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MainLiteratureId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramMainLiteratures");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramRegulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("RegulationId")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegulationId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramRegulations");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramTeachers");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramTestWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TestWorkId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestWorkId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramTestWorks");
                });

            modelBuilder.Entity("e.moiroServer.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("e.moiroServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("e.moiroServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("e.moiroServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumSection", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.SectionNumber", null)
                        .WithMany("CurriculumSections")
                        .HasForeignKey("SectionNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicAdditionalLiterature", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.AdditionalLiterature", null)
                        .WithMany("CurriculumTopicAdditionalLiteratures")
                        .HasForeignKey("AdditionalLiteratureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany("CurriculumTopicAdditionalLiteratures")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicDepartment", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany("CurriculumTopicDepartments")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.Department", null)
                        .WithMany("CurriculumTopicDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicFinalExamination", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany("CurriculumTopicFinalExaminations")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.FinalExamination", null)
                        .WithMany("CurriculumTopicFinalExaminations")
                        .HasForeignKey("FinalExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicMainLiterature", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany("CurriculumTopicMainLiteratures")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.MainLiterature", null)
                        .WithMany("CurriculumTopicMainLiteratures")
                        .HasForeignKey("MainLiteratureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicRegulation", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany("CurriculumTopicRegulations")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.Regulation", null)
                        .WithMany("CurriculumTopicRegulations")
                        .HasForeignKey("RegulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicStudentCategory", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany("CurriculumTopicStudentCategories")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.StudentCategory", null)
                        .WithMany("CurriculumTopicStudentCategories")
                        .HasForeignKey("StudentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicTestWork", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany("CurriculumTopicTestWorks")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TestWork", null)
                        .WithMany("CurriculumTopicTestWorks")
                        .HasForeignKey("TestWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.CurriculumTopicTrainingProgram", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumTopic", null)
                        .WithMany("CurriculumTopicTrainingPrograms")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.OccupationForm", null)
                        .WithMany("CurriculumTopicTrainingPrograms")
                        .HasForeignKey("OccupationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Group", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.FormOfEducation", null)
                        .WithMany("Groups")
                        .HasForeignKey("FormOfEducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.Teacher", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.TeachingPosition", null)
                        .WithMany("Teachers")
                        .HasForeignKey("TeachingPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgram", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.Department", null)
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("DepartmentId1");

                    b.HasOne("e.moiroServer.Data.Models.StudentCategory", null)
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("StudentCategoryId");
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramAdditionalLiterature", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.AdditionalLiterature", null)
                        .WithMany("TrainingProgramAdditionalLiteratures")
                        .HasForeignKey("AdditionalLiteratureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramAdditionalLiteratures")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramCurriculumSection", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.CurriculumSection", null)
                        .WithMany("TrainingProgramCurriculumSections")
                        .HasForeignKey("CurriculumSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramCurriculumSections")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramFinalExamination", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.FinalExamination", null)
                        .WithMany("TrainingProgramFinalExaminations")
                        .HasForeignKey("FinalExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramFinalExaminations")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramMainLiterature", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.MainLiterature", null)
                        .WithMany("TrainingProgramMainLiteratures")
                        .HasForeignKey("MainLiteratureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramMainLiteratures")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramRegulation", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.Regulation", null)
                        .WithMany("TrainingProgramRegulations")
                        .HasForeignKey("RegulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramRegulations")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramTeacher", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.Teacher", null)
                        .WithMany("TrainingProgramTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramTeachers")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e.moiroServer.Data.Models.TrainingProgramTestWork", b =>
                {
                    b.HasOne("e.moiroServer.Data.Models.TestWork", null)
                        .WithMany("TrainingProgramTestWorks")
                        .HasForeignKey("TestWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e.moiroServer.Data.Models.TrainingProgram", null)
                        .WithMany("TrainingProgramTestWorks")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
